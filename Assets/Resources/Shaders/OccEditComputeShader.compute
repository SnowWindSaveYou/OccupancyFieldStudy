// Each #kernel tells which function to compile; you can have many kernels

#pragma kernel DragFlow
#pragma kernel ExpandFlow
#pragma kernel ShinkFlow
#pragma kernel RefineOccTex
#pragma kernel CopyTex

RWTexture3D<float> _OccTex;
//RWTexture3D<float3> _FlowTex;
Texture3D<float> _InputOccTex;

int3 _VoxelOffset;
int3 _VoxelDim;

float3 _CursorPos;
float3 _CursorNormal;
float3 _CursorPrePos;
float3 _CursorRadius;


SamplerState myLinearClampSampler;
float SampleLinear(float3 p)
{
	return _InputOccTex.SampleLevel(myLinearClampSampler, p, 0).x;
}

float3 CalculateGradient(float3 p)
{
	float3 ratio = 1.0 / (_VoxelDim);
	return float3(
		SampleLinear(p - float3(1.0, 0.0, 0.0)  *ratio)
		- SampleLinear(p + float3(1.0, 0.0, 0.0)  *ratio),

		SampleLinear(p - float3(0.0, 1.0, 0.0)  *ratio)
		- SampleLinear(p + float3(0.0, 1.0, 0.0) *ratio),

		SampleLinear(p - float3(0.0, 0.0, 1.0)  *ratio)
		- SampleLinear(p + float3(0.0, 0.0, 1.0) *ratio)
		);
}



float getCursorDist(float3 voxelPos,float3 centerPos){
	float3 p = voxelPos - centerPos;
	float k0 = length(p/_CursorRadius);
	float k1 = length(p/_CursorRadius*_CursorRadius);
	return k0*(k0-1)/k1;
}

[numthreads(8,8,8)]
void CopyTex (uint3 id : SV_DispatchThreadID)
{
    uint3 idx = id;
    _OccTex[idx] = _InputOccTex[idx];
}

[numthreads(8,8,8)]
void RefineOccTex (uint3 id : SV_DispatchThreadID)
{
    uint3 idx = id;
    float curr = _OccTex[idx];
    if(curr<=0||curr>=1)return;
   // int a = 0;

    float a = _OccTex[idx+int3(1,0,0)];
    float b = _OccTex[idx-int3(1,0,0)];
    float c = _OccTex[idx+int3(0,1,0)];
    float d = _OccTex[idx-int3(0,1,0)];
    float e = _OccTex[idx+int3(0,0,1)];
    float f = _OccTex[idx-int3(0,0,1)];

    if(   
        (a+b+c+d+e+f)<1
    ){
         _OccTex[idx]=0;
    }
}

[numthreads(8,8,8)]
void DragFlow (uint3 id : SV_DispatchThreadID)
{
    //uint3 idx = id+ _VoxelOffset;
    uint3 idx = id;
    float dist = getCursorDist(idx,_CursorPrePos);
    dist = -min(dist,0);

    //float w = dist/length(_CursorRadius) *100;

    float w = dist *10;
    
    float3 vec = w*(_CursorPos- _CursorPrePos);

    float3 fromPos = idx-vec +0.5f;

    float value = SampleLinear(fromPos/float3(_VoxelDim));

    _OccTex[idx] = saturate(value);

}
[numthreads(8,8,8)]
void ExpandFlow (uint3 id : SV_DispatchThreadID)
{

    //uint3 idx = id+ _VoxelOffset;
    uint3 idx = id;
    float dist = getCursorDist(idx,_CursorPrePos);
    dist = abs(min(dist,0));

    float w = dist/length(_CursorRadius);
   // float w = dist;
    if(w==0){
        _OccTex[idx] = _InputOccTex[idx];
        return;
    }

    float val = _OccTex[idx] ;
    if(val==1){
        return;
    }

   // w = w*w*100*length(_CursorRadius)*10;
    float3 normal = normalize( CalculateGradient((float3(idx)+0.5)/float3(_VoxelDim)));
    float3 vec = -w*normal*32;

    float3 fromPos = idx+vec +0.5f;
    float value = SampleLinear(fromPos/float3(_VoxelDim));

    _OccTex[idx] = saturate( value);
}



[numthreads(8,8,8)]
void ShinkFlow (uint3 id : SV_DispatchThreadID)
{
    //uint3 idx = id+ _VoxelOffset;
    uint3 idx = id;
    float dist = getCursorDist(idx,_CursorPrePos);
    dist = abs(min(dist,0));

    float w = dist/length(_CursorRadius);
    if(w==0){
        _OccTex[idx] = _InputOccTex[idx];
        return;

    }

    float val = _OccTex[idx] ;
    if(val==0){
        return;
    }
    float3 normal = normalize( CalculateGradient((float3(idx)+0.5)/float3(_VoxelDim)));
    float3 vec = w*normal*16;

    float3 fromPos = idx+vec +0.5f;
    float value = SampleLinear(fromPos/float3(_VoxelDim));

    _OccTex[idx] = saturate( value);


}
