// Each #kernel tells which function to compile; you can have many kernels

#pragma kernel DragFlow
#pragma kernel ExpandFlow
#pragma kernel ShinkFlow
#pragma kernel DrawFlow
#pragma kernel TowardFlow

#pragma kernel RefineOccTex
#pragma kernel CopyTex

RWTexture3D<float> _OccTex;
//RWTexture3D<float3> _FlowTex;
Texture3D<float> _InputOccTex;

int3 _VoxelOffset;
int3 _VoxelDim;

float3 _CursorPos;
float3 _CursorNormal;
float3 _CursorPrePos;
float3 _CursorRadius;

float _Intensity;

SamplerState myLinearClampSampler;
float SampleLinear(float3 p)
{
	return _InputOccTex.SampleLevel(myLinearClampSampler, p, 0).x;
}


float3 CalculateGradient(float3 p)
{
	float3 ratio = 1.0 / (_VoxelDim);
	return float3(
		SampleLinear(p - float3(1.0, 0.0, 0.0)  *ratio)
		- SampleLinear(p + float3(1.0, 0.0, 0.0)  *ratio),

		SampleLinear(p - float3(0.0, 1.0, 0.0)  *ratio)
		- SampleLinear(p + float3(0.0, 1.0, 0.0) *ratio),

		SampleLinear(p - float3(0.0, 0.0, 1.0)  *ratio)
		- SampleLinear(p + float3(0.0, 0.0, 1.0) *ratio)
		);
}



float getCursorDist(float3 voxelPos,float3 centerPos){
	//float3 p = voxelPos - centerPos;
	//float k0 = length(p/_CursorRadius);
	//float k1 = length(p/_CursorRadius*_CursorRadius);
	//return k0*(k0-1)/k1;

    return distance(voxelPos,centerPos)-_CursorRadius.x;
}

[numthreads(8,8,8)]
void CopyTex (uint3 id : SV_DispatchThreadID)
{
    uint3 idx = id;
    _OccTex[idx] = _InputOccTex[idx];
}

[numthreads(8,8,8)]
void RefineOccTex (uint3 id : SV_DispatchThreadID)
{
    uint3 idx = id;
    float curr = _InputOccTex[idx];
    if(curr<=0||curr>=1)return;
	float val[8] = {
		_InputOccTex[(idx + int3(0, 0, 1) )],
		_InputOccTex[(idx + int3(1, 0, 1) )],
		_InputOccTex[(idx + int3(1, 0, 0) )],
		curr,
		_InputOccTex[(idx + int3(0, 1, 1) )],
		_InputOccTex[(idx + int3(1, 1, 1) )],
		_InputOccTex[(idx + int3(1, 1, 0) )],
		_InputOccTex[(idx + int3(0, 1, 0) )]
	};
	int cubeIndex = 0;
	if (val[0] < 0.5) cubeIndex |= 1;
	if (val[1] < 0.5) cubeIndex |= 2;
	if (val[2] < 0.5) cubeIndex |= 4;
	if (val[3] < 0.5) cubeIndex |= 8;
	if (val[4] < 0.5) cubeIndex |= 16;
	if (val[5] < 0.5) cubeIndex |= 32;
	if (val[6] < 0.5) cubeIndex |= 64;
	if (val[7] < 0.5) cubeIndex |= 128;
    if(cubeIndex==0){
        //_OccTex[idx]=1;
        _OccTex[idx]=curr*2;
    }
    if(cubeIndex==255){
        //_OccTex[idx]=0;
        _OccTex[idx]=curr*0.5;
    }
    //float a = _OccTex[idx+int3(1,0,0)];
    //float b = _OccTex[idx-int3(1,0,0)];
    //float c = _OccTex[idx+int3(0,1,0)];
    //float d = _OccTex[idx-int3(0,1,0)];
    //float e = _OccTex[idx+int3(0,0,1)];
    //float f = _OccTex[idx-int3(0,0,1)];

    //if(   
    //    (a+b+c+d+e+f)<1
    //){
    //     _OccTex[idx]=0;
    //}
}

[numthreads(8,8,8)]
void DragFlow (uint3 id : SV_DispatchThreadID)
{
    //uint3 idx = id+ _VoxelOffset;
    uint3 idx = id;
    float3 idxPos = idx+0.5;
    float dist = getCursorDist(idxPos,_CursorPos);
    dist = -min(dist,0);

    //float w = dist/length(_CursorRadius) *100;
    //float w = dist /2.0;
    float w =  dist/_CursorRadius.x *1.5 ;
    float3 vec = w*(_CursorPos- _CursorPrePos);
    float3 fromPos = idxPos-vec;
    float value = SampleLinear(fromPos/float3(_VoxelDim));

    _OccTex[idx] = saturate(value);

}
[numthreads(8,8,8)]
void ExpandFlow (uint3 id : SV_DispatchThreadID)
{
    uint3 idx = id;
    float3 idxPos = idx+0.5;
    float dist = getCursorDist(idxPos,_CursorPos);
    dist = abs(min(dist,0));

    float w = dist/length(_CursorRadius);
    if(w==0){
        _OccTex[idx] = _InputOccTex[idx];
        return;
    }

    float val = _InputOccTex[idx] ;
    if(val==1){
        return;
    }
    float3 normal = ( CalculateGradient(idxPos/float3(_VoxelDim)));
    if(length(normal)<0.0001f)return;
    normal = normalize(normal);
    float3 vec = -w*normal*_Intensity;

    float3 fromPos = idxPos+vec;
    float value = SampleLinear(fromPos/float3(_VoxelDim));

    _OccTex[idx] = saturate( value);
}



[numthreads(8,8,8)]
void ShinkFlow (uint3 id : SV_DispatchThreadID)
{
    uint3 idx = id;
    float3 idxPos = idx+0.5;
    float dist = getCursorDist(idxPos,_CursorPos);

    if(dist>0.5){
        _OccTex[idx] = _InputOccTex[idx];
        return;
    }
    dist = abs(min(dist,0));
    float w = ( dist/_CursorRadius.x);
    float val = _InputOccTex[idx] ;
    if(val==0){
        return;
    }
    float3 normal = ( CalculateGradient(idxPos/float3(_VoxelDim)));
    if(length(normal)<0.0001f)return;
    normal = normalize(normal);
    //float3 normal = normalize(idxPos- _CursorPos);
    float3 vec = w*normal*_Intensity;

    float3 fromPos = idxPos+vec;
    float value = SampleLinear(fromPos/float3(_VoxelDim));

    _OccTex[idx] = min(val, value);

}


[numthreads(8,8,8)]
void DrawFlow (uint3 id : SV_DispatchThreadID)
{
    uint3 idx = id;
    float3 idxPos = idx+0.5;
    float dist = getCursorDist(idxPos,_CursorPos);
    if(dist>0.5f){
        _OccTex[idx] = _InputOccTex[idx];
        return;
    }
    else if(dist<-0.5f){
        _OccTex[idx] = 1;
        return;
    }
    else{
        float occ = 0;
        const int k_size = 6;
        for(int i = 0;i<k_size;i++){
            for(int j = 0;j<k_size;j++){
                for(int k = 0;k<k_size;k++){
                    occ+= max(- sign(getCursorDist(idx+float3(i,j,k)/k_size,_CursorPos)),0);
                }
            }
        }
        _OccTex[idx] =max(_InputOccTex[idx] , saturate( occ/pow(k_size,3)));
        return;
    }

}


[numthreads(8,8,8)]
void TowardFlow (uint3 id : SV_DispatchThreadID)
{
    uint3 idx = id;
    float3 idxPos = idx+0.5;
    float dist = getCursorDist(idxPos,_CursorPos);
    if(dist>0){
        _OccTex[idx] = _InputOccTex[idx];
        return;
    }
    float w =  dist/_CursorRadius.x;
    float3 vec = w* normalize (idx.xyz-_CursorPos.xyz);

    float3 fromPos = idxPos-vec;

    float value = SampleLinear(fromPos/float3(_VoxelDim));
    if(value<=0){
        return;
    }

    _OccTex[idx] = max(_OccTex[idx] ,saturate(value));
}
